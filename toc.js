// Populate the sidebar
//
// This is a script, and not included directly in the page, to control the total size of the book.
// The TOC contains an entry for each page, so if each page includes a copy of the TOC,
// the total size of the page becomes O(n**2).
class MDBookSidebarScrollbox extends HTMLElement {
    constructor() {
        super();
    }
    connectedCallback() {
        this.innerHTML = '<ol class="chapter"><li class="chapter-item affix "><a href="introduction.html">はじめに</a></li><li class="chapter-item affix "><li class="part-title">第1部：プログラミングの世界へようこそ</li><li class="chapter-item "><a href="chapter_1/index.html"><strong aria-hidden="true">1.</strong> 第1章：プログラミングとは</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_1/1-1.html"><strong aria-hidden="true">1.1.</strong> コンピュータとプログラムの関係</a></li><li class="chapter-item "><a href="chapter_1/1-2.html"><strong aria-hidden="true">1.2.</strong> プログラミング言語の役割</a></li><li class="chapter-item "><a href="chapter_1/1-3.html"><strong aria-hidden="true">1.3.</strong> なぜDartを学ぶのか</a></li><li class="chapter-item "><a href="chapter_1/1-4.html"><strong aria-hidden="true">1.4.</strong> 開発環境の準備（DartPadの使い方）</a></li><li class="chapter-item "><a href="chapter_1/1-5.html"><strong aria-hidden="true">1.5.</strong> はじめてのプログラム「Hello, World!」</a></li></ol></li><li class="chapter-item "><a href="chapter_2/index.html"><strong aria-hidden="true">2.</strong> 第2章：プログラムの基本要素</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_2/2-1.html"><strong aria-hidden="true">2.1.</strong> プログラムの構造を理解しよう</a></li><li class="chapter-item "><a href="chapter_2/2-2.html"><strong aria-hidden="true">2.2.</strong> コメントの書き方と重要性</a></li><li class="chapter-item "><a href="chapter_2/2-3.html"><strong aria-hidden="true">2.3.</strong> print文で画面に表示する</a></li><li class="chapter-item "><a href="chapter_2/2-4.html"><strong aria-hidden="true">2.4.</strong> プログラムの実行順序</a></li><li class="chapter-item "><a href="chapter_2/2-5.html"><strong aria-hidden="true">2.5.</strong> エラーメッセージの読み方</a></li></ol></li><li class="chapter-item "><li class="part-title">第2部：データと計算の基礎</li><li class="chapter-item "><a href="chapter_3/index.html"><strong aria-hidden="true">3.</strong> 第3章：変数とデータ型</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_3/3-1.html"><strong aria-hidden="true">3.1.</strong> 変数とは何か</a></li><li class="chapter-item "><a href="chapter_3/3-2.html"><strong aria-hidden="true">3.2.</strong> 数値を扱う（int、double）</a></li><li class="chapter-item "><a href="chapter_3/3-3.html"><strong aria-hidden="true">3.3.</strong> 文字列を扱う（String）</a></li><li class="chapter-item "><a href="chapter_3/3-4.html"><strong aria-hidden="true">3.4.</strong> 真偽値を扱う（bool）</a></li><li class="chapter-item "><a href="chapter_3/3-5.html"><strong aria-hidden="true">3.5.</strong> 変数の命名規則とわかりやすい名前の付け方</a></li></ol></li><li class="chapter-item "><a href="chapter_4/index.html"><strong aria-hidden="true">4.</strong> 第4章：計算と演算子</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_4/4-1.html"><strong aria-hidden="true">4.1.</strong> 算術演算子（+、-、*、/、%）</a></li><li class="chapter-item "><a href="chapter_4/4-2.html"><strong aria-hidden="true">4.2.</strong> 文字列の連結</a></li><li class="chapter-item "><a href="chapter_4/4-3.html"><strong aria-hidden="true">4.3.</strong> 変数の値を変更する</a></li><li class="chapter-item "><a href="chapter_4/4-4.html"><strong aria-hidden="true">4.4.</strong> 演算の優先順位</a></li><li class="chapter-item "><a href="chapter_4/4-5.html"><strong aria-hidden="true">4.5.</strong> 練習問題：簡単な計算プログラム</a></li></ol></li><li class="chapter-item "><li class="part-title">第3部：プログラムの流れを制御する</li><li class="chapter-item "><a href="chapter_5/index.html"><strong aria-hidden="true">5.</strong> 第5章：条件分岐（if文）</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_5/5-1.html"><strong aria-hidden="true">5.1.</strong> 条件によって処理を変える</a></li><li class="chapter-item "><a href="chapter_5/5-2.html"><strong aria-hidden="true">5.2.</strong> 比較演算子（==、!=、&gt;、&lt;、&gt;=、&lt;=）</a></li><li class="chapter-item "><a href="chapter_5/5-3.html"><strong aria-hidden="true">5.3.</strong> if-else文の使い方</a></li><li class="chapter-item "><a href="chapter_5/5-4.html"><strong aria-hidden="true">5.4.</strong> 複数の条件を組み合わせる（&amp;&amp;、||）</a></li><li class="chapter-item "><a href="chapter_5/5-5.html"><strong aria-hidden="true">5.5.</strong> 実践：年齢による入場料金の計算</a></li></ol></li><li class="chapter-item "><a href="chapter_6/index.html"><strong aria-hidden="true">6.</strong> 第6章：繰り返し処理（ループ）</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_6/6-1.html"><strong aria-hidden="true">6.1.</strong> 同じ処理を繰り返す理由</a></li><li class="chapter-item "><a href="chapter_6/6-2.html"><strong aria-hidden="true">6.2.</strong> for文の基本</a></li><li class="chapter-item "><a href="chapter_6/6-3.html"><strong aria-hidden="true">6.3.</strong> while文の使い方</a></li><li class="chapter-item "><a href="chapter_6/6-4.html"><strong aria-hidden="true">6.4.</strong> 無限ループとその回避方法</a></li><li class="chapter-item "><a href="chapter_6/6-5.html"><strong aria-hidden="true">6.5.</strong> 実践：九九の表を作る</a></li></ol></li><li class="chapter-item "><li class="part-title">第4部：データをまとめて扱う</li><li class="chapter-item "><a href="chapter_7/index.html"><strong aria-hidden="true">7.</strong> 第7章：リスト（配列）</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_7/7-1.html"><strong aria-hidden="true">7.1.</strong> 複数のデータをまとめて管理する</a></li><li class="chapter-item "><a href="chapter_7/7-2.html"><strong aria-hidden="true">7.2.</strong> リストの作成と要素へのアクセス</a></li><li class="chapter-item "><a href="chapter_7/7-3.html"><strong aria-hidden="true">7.3.</strong> リストに要素を追加・削除する</a></li><li class="chapter-item "><a href="chapter_7/7-4.html"><strong aria-hidden="true">7.4.</strong> リストと繰り返し処理の組み合わせ</a></li><li class="chapter-item "><a href="chapter_7/7-5.html"><strong aria-hidden="true">7.5.</strong> 実践：成績管理プログラム</a></li></ol></li><li class="chapter-item "><a href="chapter_8/index.html"><strong aria-hidden="true">8.</strong> 第8章：マップ（連想配列）</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_8/8-1.html"><strong aria-hidden="true">8.1.</strong> キーと値のペアでデータを管理</a></li><li class="chapter-item "><a href="chapter_8/8-2.html"><strong aria-hidden="true">8.2.</strong> マップの作成と操作</a></li><li class="chapter-item "><a href="chapter_8/8-3.html"><strong aria-hidden="true">8.3.</strong> マップの活用例</a></li><li class="chapter-item "><a href="chapter_8/8-4.html"><strong aria-hidden="true">8.4.</strong> 実践：簡単な辞書プログラム</a></li></ol></li><li class="chapter-item "><li class="part-title">第5部：関数でコードを整理する</li><li class="chapter-item "><a href="chapter_9/index.html"><strong aria-hidden="true">9.</strong> 第9章：関数の基礎</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_9/9-1.html"><strong aria-hidden="true">9.1.</strong> 関数とは何か</a></li><li class="chapter-item "><a href="chapter_9/9-2.html"><strong aria-hidden="true">9.2.</strong> 関数の定義と呼び出し</a></li><li class="chapter-item "><a href="chapter_9/9-3.html"><strong aria-hidden="true">9.3.</strong> 引数と戻り値</a></li><li class="chapter-item "><a href="chapter_9/9-4.html"><strong aria-hidden="true">9.4.</strong> 変数のスコープ（有効範囲）</a></li><li class="chapter-item "><a href="chapter_9/9-5.html"><strong aria-hidden="true">9.5.</strong> 実践：電卓プログラムを関数で整理</a></li></ol></li><li class="chapter-item "><a href="chapter_10/index.html"><strong aria-hidden="true">10.</strong> 第10章：関数の活用</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_10/10-1.html"><strong aria-hidden="true">10.1.</strong> 複数の引数を持つ関数</a></li><li class="chapter-item "><a href="chapter_10/10-2.html"><strong aria-hidden="true">10.2.</strong> オプション引数とデフォルト値</a></li><li class="chapter-item "><a href="chapter_10/10-3.html"><strong aria-hidden="true">10.3.</strong> 関数を使ったプログラムの設計</a></li><li class="chapter-item "><a href="chapter_10/10-4.html"><strong aria-hidden="true">10.4.</strong> 実践：じゃんけんゲームを作る</a></li></ol></li><li class="chapter-item "><li class="part-title">第6部：オブジェクト指向プログラミング入門</li><li class="chapter-item "><a href="chapter_11/index.html"><strong aria-hidden="true">11.</strong> 第11章：クラスとオブジェクトの基礎</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_11/11-1.html"><strong aria-hidden="true">11.1.</strong> 現実世界をプログラムで表現する</a></li><li class="chapter-item "><a href="chapter_11/11-2.html"><strong aria-hidden="true">11.2.</strong> クラスの定義</a></li><li class="chapter-item "><a href="chapter_11/11-3.html"><strong aria-hidden="true">11.3.</strong> オブジェクトの作成と使用</a></li><li class="chapter-item "><a href="chapter_11/11-4.html"><strong aria-hidden="true">11.4.</strong> フィールドとメソッド</a></li><li class="chapter-item "><a href="chapter_11/11-5.html"><strong aria-hidden="true">11.5.</strong> 実践：ペット管理アプリ</a></li></ol></li><li class="chapter-item "><a href="chapter_12/index.html"><strong aria-hidden="true">12.</strong> 第12章：オブジェクト指向の活用</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_12/12-1.html"><strong aria-hidden="true">12.1.</strong> コンストラクタ</a></li><li class="chapter-item "><a href="chapter_12/12-2.html"><strong aria-hidden="true">12.2.</strong> ゲッターとセッター</a></li><li class="chapter-item "><a href="chapter_12/12-3.html"><strong aria-hidden="true">12.3.</strong> カプセル化の考え方</a></li><li class="chapter-item "><a href="chapter_12/12-4.html"><strong aria-hidden="true">12.4.</strong> 実践：図書館管理システム</a></li></ol></li><li class="chapter-item "><li class="part-title">第7部：エラー処理とデバッグ</li><li class="chapter-item "><a href="chapter_13/index.html"><strong aria-hidden="true">13.</strong> 第13章：エラーへの対処</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_13/13-1.html"><strong aria-hidden="true">13.1.</strong> エラーの種類を理解する</a></li><li class="chapter-item "><a href="chapter_13/13-2.html"><strong aria-hidden="true">13.2.</strong> try-catch文でエラーを処理する</a></li><li class="chapter-item "><a href="chapter_13/13-3.html"><strong aria-hidden="true">13.3.</strong> デバッグの基本技術</a></li><li class="chapter-item "><a href="chapter_13/13-4.html"><strong aria-hidden="true">13.4.</strong> よくあるエラーとその対処法</a></li></ol></li><li class="chapter-item "><li class="part-title">第8部：実践プロジェクト</li><li class="chapter-item "><a href="chapter_14/index.html"><strong aria-hidden="true">14.</strong> 第14章：次のステップへ</a><a class="toggle"><div>❱</div></a></li><li><ol class="section"><li class="chapter-item "><a href="chapter_14/14-1.html"><strong aria-hidden="true">14.1.</strong> より高度なDartの機能</a></li><li class="chapter-item "><a href="chapter_14/14-2.html"><strong aria-hidden="true">14.2.</strong> 継続的な学習のためのリソース</a></li></ol></li></ol>';
        // Set the current, active page, and reveal it if it's hidden
        let current_page = document.location.href.toString().split("#")[0].split("?")[0];
        if (current_page.endsWith("/")) {
            current_page += "index.html";
        }
        var links = Array.prototype.slice.call(this.querySelectorAll("a"));
        var l = links.length;
        for (var i = 0; i < l; ++i) {
            var link = links[i];
            var href = link.getAttribute("href");
            if (href && !href.startsWith("#") && !/^(?:[a-z+]+:)?\/\//.test(href)) {
                link.href = path_to_root + href;
            }
            // The "index" page is supposed to alias the first chapter in the book.
            if (link.href === current_page || (i === 0 && path_to_root === "" && current_page.endsWith("/index.html"))) {
                link.classList.add("active");
                var parent = link.parentElement;
                if (parent && parent.classList.contains("chapter-item")) {
                    parent.classList.add("expanded");
                }
                while (parent) {
                    if (parent.tagName === "LI" && parent.previousElementSibling) {
                        if (parent.previousElementSibling.classList.contains("chapter-item")) {
                            parent.previousElementSibling.classList.add("expanded");
                        }
                    }
                    parent = parent.parentElement;
                }
            }
        }
        // Track and set sidebar scroll position
        this.addEventListener('click', function(e) {
            if (e.target.tagName === 'A') {
                sessionStorage.setItem('sidebar-scroll', this.scrollTop);
            }
        }, { passive: true });
        var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');
        sessionStorage.removeItem('sidebar-scroll');
        if (sidebarScrollTop) {
            // preserve sidebar scroll position when navigating via links within sidebar
            this.scrollTop = sidebarScrollTop;
        } else {
            // scroll sidebar to current active section when navigating via "next/previous chapter" buttons
            var activeSection = document.querySelector('#sidebar .active');
            if (activeSection) {
                activeSection.scrollIntoView({ block: 'center' });
            }
        }
        // Toggle buttons
        var sidebarAnchorToggles = document.querySelectorAll('#sidebar a.toggle');
        function toggleSection(ev) {
            ev.currentTarget.parentElement.classList.toggle('expanded');
        }
        Array.from(sidebarAnchorToggles).forEach(function (el) {
            el.addEventListener('click', toggleSection);
        });
    }
}
window.customElements.define("mdbook-sidebar-scrollbox", MDBookSidebarScrollbox);
